{
    "version": "https://jsonfeed.org/version/1",
    "title": "Elian Van Cutsem's blog",
    "home_page_url": "https://www.elianvancutsem.com",
    "description": "Welcome to my blog. I write about technology and coding.",
    "icon": "~/assets/about/about3.png",
    "items": [
        {
            "id": "adding-tracking-with-GA4-to-nuxt",
            "content_html": "<h1 id=\"adding-tracking-to-your-nuxt-site-with-ga4\">Adding tracking to your Nuxt site with GA4</h1>\n<p>I&#39;ve been wanting to see how my site did in analytics for a while now but never got to actually installing and preparing it. Now that I finally attached a new domain (<a href=\"https://elian.codes\">elian.codes</a>) and fixed my DNS for <a href=\"https://elianvancutsem.com\">elianvancutsem.com</a>. I put in the works to add google analytics to my site. (blog post coming up about how I did that soon...)</p>\n<p>Here is a little guide on how I did it and integrated it with <a href=\"https://nuxtjs.org\">Nuxt</a></p>\n<h2 id=\"using-nuxtjsgoogle-analytics\">Using nuxtjs/google-analytics</h2>\n<p>The <a href=\"https://google-analytics.nuxtjs.org/\">nuxtjs/google-analytics</a> module is a <a href=\"https://github.com/nuxt-community\">Nuxt Community</a> maintained module for Nuxt. It depends on the <a href=\"https://github.com/MatteoGabriele/vue-analytics\">vue-analytics</a> package and optimizes it for Nuxt. It&#39;s very easy to install and configure, but it doesn&#39;t support GA4 (yet).</p>\n<p>Install the module with:</p>\n<pre><code class=\"language-bash\">yarn add --dev @nuxtjs/google-analytics\n</code></pre>\n<p>and configure the <code>nuxt.config.js</code> by adding the module to the <code>buildModules</code></p>\n<pre><code class=\"language-js\">{\n  buildModules: [\n    &#39;@nuxtjs/google-analytics&#39;\n  ],\n}\n</code></pre>\n<p>Note that if you&#39;re using Nuxt <code>&lt; 2.9</code> you need to add it to the <code>modules</code> instead of <code>buildModules</code>.</p>\n<p>Then simply add a new section <code>googleAnalytics</code> to your <code>nuxt.config.js</code></p>\n<pre><code class=\"language-js\">export default {\n  googleAnalytics: {\n    id: &#39;UA-XXX-X&#39;\n  }\n}\n</code></pre>\n<p>If your source code is private you can add it right in the config, but it&#39;s good practice to add it as an environment variable. more about that <a href=\"#using-an-environment-variable\">here</a>.</p>\n<h3 id=\"other-options-and-configurations\">other options and configurations</h3>\n<p>There are a lot of options available to customize your config to your need and you can read more about that on <a href=\"https://google-analytics.nuxtjs.org/options/\">the documentation</a>.</p>\n<h2 id=\"using-vue-gtag\">Using vue-gtag</h2>\n<p>If you need or want to use the newer GA4, you&#39;ll have to wait a bit longer until nuxtjs/google-analytics supports it, or use a little workaround.</p>\n<p>You can install <a href=\"https://www.npmjs.com/package/vue-gtag\">vue-gtag</a> as a package and configure Nuxt to use it as a plugin.</p>\n<p>You can install vue-gtag via cli using:</p>\n<pre><code class=\"language-bash\">yarn add vue-gtag\n</code></pre>\n<p>then make a new file in the <code>plugins</code> directory called <code>gtag.js</code>.</p>\n<p>then add the following to the <code>gtag.js</code> file:</p>\n<pre><code class=\"language-js\">import Vue from &#39;vue&#39;\nimport VueGtag from &#39;vue-gtag&#39;\n\nVue.use(VueGtag, {\n  config: { id: &#39;G-XXXXXXXXXX&#39; }\n})\n</code></pre>\n<p>Next, configure Nuxt to use the plugin by adding this to your <code>nuxt.config.js</code> file:</p>\n<pre><code class=\"language-js\">{\n  plugins: [&#39;~/plugins/gtag.js&#39;]\n}\n</code></pre>\n<p>That should be it!</p>\n<h2 id=\"using-an-environment-variable\">Using an environment variable</h2>\n<p>It&#39;s good practice to don&#39;t expose your Google GTag. So you can add it as an environment. To do this you can just add <code>process.env.GOOGLE_ANALITICS_ID</code> instead of the tag in your config.</p>\n<p>In the case of nuxtjs/google-analytics:</p>\n<pre><code class=\"language-js\">googleAnalytics: {\n  id: process.env.GOOGLE_ANALITICS_ID\n}\n</code></pre>\n<p>and in the case of vue-gtag:</p>\n<pre><code class=\"language-js\">Vue.use(VueGtag, {\n  config: { id: process.env.GOOGLE_ANALITICS_ID }\n})\n</code></pre>\n<p>Now you can add the environment variable in your CI/CD or build config.</p>\n<p>Hope you got something useful out of this!</p>\n",
            "url": "https://www.elianvancutsem.com/blog/adding-tracking-with-GA4-to-nuxt",
            "title": "ðŸ“ˆ Adding tracking to your Nuxt site with GA4",
            "summary": "Adding tracking to your Nuxt site with GA4",
            "image": "https://google-analytics.nuxtjs.org/preview.png",
            "date_modified": "2021-03-15T22:29:23.607Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "Nuxt",
                "Tracking",
                "Analytics",
                "JavaScript"
            ]
        },
        {
            "id": "configure-tailwindcss-with-blazor",
            "content_html": "<h1 id=\"configure-tailwindcss-with-blazor\">Configure TailwindCSS with Blazor</h1>\n<p>I had to make a project for school with <a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\">Blazor WASM</a> and I wanted to use <a href=\"https://tailwindcss.com\">TailwindCSS</a> with it. A new Blazor project is quickly setup, but it uses <a href=\"https://getbootstrap.com/\">Bootstrap</a> out of the box, so how do we configure it to use TailwindCSS?</p>\n<p>A little heads up. It&#39;s not that easy, if you plan on using the basics, you could also use the <a href=\"https://tailwindcss.com/docs/installation#using-tailwind-via-cdn\">CDN</a>, but if you plan on using more advanced features in the configuration like using <a href=\"https://sass-lang.com/\">Sass</a> and <code>@apply</code> classes or purging, it&#39;s worth it to find a solution.</p>\n<h2 id=\"starting-a-new-blazor-project\">Starting a new Blazor project.</h2>\n<p>Starting a new blazor project is very easy to do. First, we have to install the dotnet SDK, which can be done easily <a href=\"https://dotnet.microsoft.com/learn/aspnet/blazor-tutorial/install\">here</a>. It&#39;s a very straight forward process.</p>\n<p>After that, we can bootstrap the default Blazor WASM template by running</p>\n<pre><code class=\"language-bash\">dotnet new blazorserver -o yourAmazingApp --no-https\n</code></pre>\n<p>that will create a new directory called <code>yourAmazingApp</code> in the location you ran the command in.</p>\n<p>Now we can start up the project in watchmode by running</p>\n<pre><code class=\"language-bash\">dotnet watch run\n</code></pre>\n<h2 id=\"preparing-a-packagejson\">Preparing a package.json</h2>\n<p>So now we have a basic project, but no Tailwind configuration or even a <code>package.json</code> file. Since Blazor isn&#39;t really meant to do this stuff, we have to make a workaround, but it works fine.</p>\n<h3 id=\"theoretical-solution\">Theoretical solution</h3>\n<p>We can create a little local project with Yarn and use that to download our node_modules. Then we use Webpack to compile and export our <code>Tailwind.scss</code> file to a <code>main.css</code> file in the <code>wwwroot/css</code> folder.</p>\n<h3 id=\"adding-the-packagejson-file\">Adding the package.json file</h3>\n<p>We create a folder called <code>assets</code> in our root directory of our <code>.csproj</code>. in that folder, we can run <code>npm init</code> or <code>yarn init</code>. For the rest of this post I&#39;ll use Yarn, but feel free to use NPM, it should also work.</p>\n<p>so when we initialize a <code>package.json</code> file we can add some dependencies. Below are some I used, but if you&#39;re not using Sass, you can leave out some.</p>\n<pre><code class=\"language-json\">&quot;devDependencies&quot;: {\n    &quot;postcss-import&quot;: &quot;^14.0.0&quot;,\n    &quot;webpack-fix-style-only-entries&quot;: &quot;^0.5.1&quot;,\n    &quot;autoprefixer&quot;: &quot;^10.2.4&quot;,\n    &quot;css-loader&quot;: &quot;^3.2.0&quot;,\n    &quot;mini-css-extract-plugin&quot;: &quot;^0.8.0&quot;,\n    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,\n    &quot;postcss&quot;: &quot;^8.2.6&quot;,\n    &quot;postcss-easy-import&quot;: &quot;^3.0.0&quot;,\n    &quot;postcss-loader&quot;: &quot;^4.2.0&quot;,\n    &quot;sass&quot;: &quot;^1.32.8&quot;,\n    &quot;sass-loader&quot;: &quot;^10.1.1&quot;,\n    &quot;style-loader&quot;: &quot;^1.0.0&quot;,\n    &quot;webpack&quot;: &quot;^4.41.0&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.3.9&quot;,\n    &quot;webpack-watch-files-plugin&quot;: &quot;^1.0.3&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;postcss-cli&quot;: &quot;^8.3.1&quot;,\n    &quot;postcss-nested&quot;: &quot;^5.0.3&quot;,\n    &quot;tailwindcss&quot;: &quot;^2.0.3&quot;\n  },\n</code></pre>\n<p>Now we have our dependencies installed, we can create some configuration files.</p>\n<h3 id=\"configuration-files\">Configuration files</h3>\n<h4 id=\"postcssconfigjs\">postcss.config.js</h4>\n<p>the <code>postcss.config.js</code> file is used to process tailwind to our custom stylesheet. Here it also imports some other things, but feel free to only add <code>require(&#39;tailwindcss&#39;)</code>.</p>\n<pre><code class=\"language-js\">module.exports = {\n    plugins: [\n        require(&#39;postcss-easy-import&#39;)({ prefix: &#39;_&#39;, extensions: [&#39;.css&#39;, &#39;.scss&#39;] }),\n        require(&#39;tailwindcss&#39;),\n        require(&#39;autoprefixer&#39;),\n        require(&#39;postcss-nested&#39;)\n    ]\n}\n</code></pre>\n<h4 id=\"webpackconfigjs\">webpack.config.js</h4>\n<p>In the <code>webpack.config.js</code> file we basically tell Webpack to take our raw  <code>/assets/scss/tailwind.scss</code> file and compile it to a <code>main.css</code> file and add it to the <code>wwwroot/css/</code> folder</p>\n<pre><code class=\"language-js\">const path = require(&#39;path&#39;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\nconst FixStyleOnlyEntriesPlugin = require(&quot;webpack-fix-style-only-entries&quot;);\n\nmodule.exports = (env, args) =&gt; ({\n    devtool: args.mode === &#39;development&#39; ? &#39;source-map&#39; : &#39;none&#39;,\n    entry: &#39;./scss/tailwind.scss&#39;,\n    output: {\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &#39;..&#39;, &#39;wwwroot/css&#39;)\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.scss$/,\n                exclude: /node_modules/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    { loader: &#39;css-loader&#39;, options: { url: false, sourceMap: true } },\n                    { loader: &#39;postcss-loader&#39; },\n                    { loader: &#39;sass-loader&#39; }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new FixStyleOnlyEntriesPlugin(),\n        new MiniCssExtractPlugin({\n            filename: &#39;[name].css&#39;\n        })\n    ]\n});\n</code></pre>\n<h4 id=\"tailwindconfigjs\">tailwind.config.js</h4>\n<p>below is the basic configuration of TailwindCSS without many to it. But from here we can customize it in any way we want like normal.</p>\n<pre><code class=\"language-js\">module.exports = {\n    purge: [],\n    theme: {\n        extend: {},\n    },\n    variants: {},\n    plugins: [],\n}\n</code></pre>\n<h2 id=\"configure-blazor-to-use-tailwindcss\">Configure Blazor to use TailwindCSS</h2>\n<p>So now we have our compiled <code>main.css</code> file, but it won&#39;t trigger when we build or run our dotnet project. For that, we have to create a separate file called <code>assets.targets</code> which will tell our dotnet project to trigger the <code>package.json</code> build scripts.</p>\n<pre><code class=\"language-xml\">&lt;Project&gt;\n\n    &lt;ItemGroup&gt;\n        &lt;StaticAssets Include=&quot;$(MSBuildThisFileDirectory)**&quot; Exclude=&quot;$(MSBuildThisFileDirectory)node_modules\\**&quot; /&gt;\n        &lt;UpToDateCheckInput Include=&quot;@(StaticAssets)&quot; /&gt;\n    &lt;/ItemGroup&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;StaticCSSPath&gt;scss\\tailwind.scss&lt;/StaticCSSPath&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;!-- If lockfile has changed, perform a new yarn install --&gt;\n    &lt;Target Name=&quot;yarnInstall&quot;\n            Inputs=&quot;$(MSBuildThisFileDirectory)yarn.lock&quot;\n            Outputs=&quot;$(BaseIntermediateOutputPath)yarn.lock&quot;&gt;\n        &lt;Message Importance=&quot;high&quot; Text=&quot;Restoring dependencies using yarn. This may take several minutes...&quot; /&gt;\n        &lt;Exec Command=&quot;yarn&quot; WorkingDirectory=&quot;$(MSBuildThisFileDirectory)&quot; /&gt;\n        &lt;Copy SourceFiles=&quot;$(MSBuildThisFileDirectory)yarn.lock&quot;\n              DestinationFolder=&quot;$(BaseIntermediateOutputPath)&quot;\n              SkipUnchangedFiles=&quot;true&quot;/&gt;\n    &lt;/Target&gt;\n\n    &lt;!-- If any source file in this dir or below has changed, perform a Webpack build --&gt;\n    &lt;Target Name=&quot;BuildStaticAssets&quot;\n            DependsOnTargets=&quot;yarnInstall&quot;\n            BeforeTargets=&quot;CoreBuild&quot;\n            Inputs=&quot;@(StaticAssets)&quot;\n            Outputs=&quot;$(MSBuildThisFileDirectory)..\\wwwroot\\$(StaticCSSPath)&quot;&gt;\n        &lt;Exec Command=&quot;yarn build:$(Configuration)&quot; WorkingDirectory=&quot;$(MSBuildThisFileDirectory)&quot; /&gt;\n    &lt;/Target&gt;\n\n&lt;/Project&gt;\n</code></pre>\n<p>now add the build scripts in <code>package.json</code> and we&#39;re pretty much done.</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n    &quot;build:Debug&quot;: &quot;webpack --mode development&quot;,\n    &quot;build:Release&quot;: &quot;webpack --mode production&quot;\n  },\n</code></pre>\n<p>from this point on we can use Tailwind in any way we want. First, we have to add it to our project by modifying our <code>.csproj</code> file.</p>\n<p><code>yourAwesomeProject.csproj</code></p>\n<pre><code class=\"language-xml\">&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;\n  \n   // default configuration here ... \n    \n  &lt;Import Project=&quot;assets\\assets.targets&quot; /&gt;\n&lt;/Project&gt;\n</code></pre>\n<h2 id=\"run-your-project\">Run your project</h2>\n<p>voila! Now every time you run <code>dotnet build</code> or debug your project. The scripts will run or at least checked. If everything goes correct, you should see the <code>main.css</code> file in your <code>/wwwroot/css</code> folder!</p>\n<p>Now we can include and use it in our markup</p>\n<p><code>Pages/_Host.cshtml</code>:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;title&gt;YourAwesomeProject&lt;/title&gt;\n    &lt;link href=&quot;~/css/main.css&quot; rel=&quot;stylesheet&quot; /&gt;\n&lt;/head&gt;\n</code></pre>\n<p>Also don&#39;t forget to put that file in your <code>.gitignore file</code> otherwise you&#39;ll push and pull a file that gets generated, which is useless.</p>\n",
            "url": "https://www.elianvancutsem.com/blog/configure-tailwindcss-with-blazor",
            "title": "ðŸ’„ Configure TailwindCSS with Blazor",
            "summary": "Configure TailwindCSS with Blazor",
            "image": "https://i.morioh.com/2019/11/28/428f90dff706.jpg",
            "date_modified": "2021-03-12T17:07:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "WASM",
                "Blazor",
                "TailwindCSS",
                "Front-end"
            ]
        },
        {
            "id": "adding-a-custom-preloader-to-your-nuxt-site",
            "content_html": "<h1 id=\"adding-a-custom-preloader-to-your-nuxt-site\">Adding a custom preloader to your nuxt site</h1>\n<p>A custom preloader on your website doesn&#39;t necessarily have to be boring. It&#39;s probably the first thing a user sees when they enter your website for the first time, so why not make it an extension of your website with a matching design.</p>\n<p>I recently redid the design of my website with TailwindCSS and came to the idea of adding a custom preloader. Nuxt is really easy expandable and customisable, so I searced for an easy way to do it and there was.</p>\n<h2 id=\"creating-the-custom-component\">Creating the custom component</h2>\n<p>So you it seems that nuxt simply allows you to set your own custom component as a preloader and it will automatically take care of the props.</p>\n<p>Just build your template as you like it. Mine was as follows: (ofcourse it uses TailwindCSS, so don&#39;t mind the crazy classes)</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;absolute z-50 w-full h-full overflow-hidden flex justify-center items-center&quot; v-if=&quot;loading&quot;&gt;\n      &lt;div class=&quot;h-14 w-14 animate-pulse bg-green-300 rounded-full flex justify-center items-center&quot;&gt;\n        &lt;svg class=&quot;w-12 h-12 text-green-500 animate-spin-slow&quot; stroke=&quot;currentColor&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;\n            &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z&quot;&gt;&lt;/path&gt;\n            &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M15 12a3 3 0 11-6 0 3 3 0 016 0z&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>then we just have to add the script with the props that Nuxt provides us with:</p>\n<pre><code class=\"language-vue\">&lt;script&gt;\n  export default {\n    data: () =&gt; ({\n      loading: false\n    }),\n    methods: {\n      start() {\n        this.loading = true\n      },\n      finish() {\n        this.loading = false\n      }\n    }\n  }\n&lt;/script&gt;\n</code></pre>\n<p>The full component is available on my <a href=\"https://github.com/ElianVanCutsem/elianvancutsem.github.io\">Github repository</a> under <code>components/loading/loading.vue</code></p>\n<p>There&#39;s really not that much about it. you can configure it as a modal, or just as a component somewhere on your page. It&#39;s up to you to invent crazy things!</p>\n<h2 id=\"telling-nuxt-to-use-you-component-as-preloader\">Telling Nuxt to use you component as preloader</h2>\n<p>Configuring Nuxt to use your component is actually very easy. You just set it in your <code>nuxt.config.js</code> file like the following:</p>\n<pre><code class=\"language-js\">module.exports {\n    loading: &#39;~/components/loader/Loader.vue&#39;\n}\n</code></pre>\n<p>As simple as that. Now nuxt should toggle your component everytime  it has something to load.</p>\n<h2 id=\"nuxt-default-preloaders\">Nuxt default preloaders</h2>\n<p>So now I had a cool custom component which looked awesome and matching to my site. Still I was not really happy with it. The main reason being that you literally have to see it everytime something loads. Everytime I clicked on a blogpost or switched pages it popped up. So it quickly annoyed me more than I found it valueable, so I ditched the idea of a preloader in the center of the page and went with the actually preset nuxt preloader and customised it to my needs.</p>\n<p>The component I made is still available in my repository over on <a href=\"https://github.com/ElianVanCutsem/elianvancutsem.github.io\">Github</a> if your interested.</p>\n<p>So as we saw in our own component, we just have to tell nuxt to use a preloader. The default Nuxt preloader can be set as following:</p>\n<pre><code class=\"language-js\">module.exports {\n    loading: true\n}\n</code></pre>\n<p>Mine is set as the following:</p>\n<pre><code class=\"language-js\">module.exports {\n    loading: {\n        color: &#39;#6ee7b7&#39;,\n        height: &#39;4px&#39;,\n        failedColor: &#39;b91c1c&#39;\n    }\n}\n</code></pre>\n<p>Not more than that, but ofcourse you can change more properties like: <code>rtl</code>, <code>css</code>, <code>continuous</code>, <code>duration</code> and more.</p>\n<p>Nuxt also has a very good documentation of this which can be found <a href=\"https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-loading\">here</a></p>\n",
            "url": "https://www.elianvancutsem.com/blog/adding-a-custom-preloader-to-your-nuxt-site",
            "title": "ðŸ’« Adding a custom preloader to your nuxt site",
            "summary": "Adding a custom preloader to your nuxt site",
            "image": "https://madewithnetwork.ams3.cdn.digitaloceanspaces.com/spatie-space-production/3075/nuxtjs-2.jpg",
            "date_modified": "2021-03-12T00:11:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "TailwindCSS",
                "Nuxt",
                "Front-end"
            ]
        },
        {
            "id": "using-konvajs-as-canvas-with-react",
            "content_html": "<h1 id=\"using-konvajs-as-canvas-with-react\">Using KonvaJS as canvas with React</h1>\n<p>While running my internship at <a href=\"https://www.vbridge.eu\">vBridge</a> I&#39;m working on a front-end based project, building a usable interface for users and needed a HTML canvas for that. Of course I couldn&#39;t just use any kind of canvas or a normal HTML canvas. I needed to render different shapes or colors based on the specific situation the user is encountering. The project uses React to begin with. So the search for a usable canvas package with React started.</p>\n<h2 id=\"packages-that-i-found\">Packages that I found</h2>\n<p>While doing some research I came across some packages that all could have been a valid choice. The packages that stood out the most to me were:</p>\n<ul>\n<li><a href=\"https://konvajs.org\">Konva</a></li>\n<li><a href=\"https://gojs.net\">GoJS</a></li>\n<li><a href=\"https://github.com/reactjs/react-art\">React art</a></li>\n<li><a href=\"https://github.com/Flipboard/react-canvas\">React Canvas</a></li>\n</ul>\n<p>Of course there&#39;s also the standard HTML canvas which you can read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">here</a></p>\n<p>There are probably a lot more available, but these are the ones that I found the most documentation of. Why I chose Kova, you can read below.</p>\n<h2 id=\"why-use-konva\">Why use Konva</h2>\n<p>So I went with Konva. Basically it would be easier to explain why I didn&#39;t went with the other ones. I chose not to use React Art because it isn&#39;t reactive and that is ofcourse one of the main aspects I&#39;ll be needing. React canvas would have been a valid choice as well. It allows you to draw DOM-like elements on the canvas, but is not as easy to draw graphics, that&#39;s where Konva and GoJS come in. Both are about drawing graphics in a performant way on the canvas. Konva integrates very easy with React since it has a specific React package called <a href=\"https://konvajs.org/docs/react/index.html\">react-konva</a>. Also, GoJS is not free-to-use in a production environment, so if I were to use GoJS, I had to explain to superiors why I needed to spend money. Since the differences are small, I chose Konva. There you have it.</p>\n<h2 id=\"differences-between-konvajs-and-react-konva\">Differences between KonvaJS and react-konva</h2>\n<p>So what&#39;s the difference between the &#39;normal&#39; Konva and react-konva packages. Well basically you can use Konva components in react-konva like so:</p>\n<pre><code class=\"language-jsx\">import React from &#39;react&#39;\nimport Konva, { Stage, Layer, Text, Rect, Circle } from &#39;react-konva&#39;\n\nconst App = () =&gt; {\n    return (\n        &lt;Stage&gt;\n            &lt;Layer&gt;\n                &lt;Text text=&quot;hello from Konva&quot;/&gt;\n                &lt;Rect fill=&quot;red&quot; height=&quot;50&quot; width=&quot;50&quot;/&gt;\n                &lt;Circle fill=&quot;red&quot; radius=&quot;60&quot;/&gt;\n            &lt;/Layer&gt;\n        &lt;/Stage&gt;\n    )\n}\n\nexport default App\n</code></pre>\n<p>Where this would translate in pure KonvaJS without react as follows</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;container&quot;&gt;\n        &lt;/div&gt;\n        &lt;script src=&quot;https://unpkg.com/konva@7.0.3/konva.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script&gt;\n        // first we need to create a stage\n        var stage = new Konva.Stage({\n        container: &#39;container&#39;,   // id of container &lt;div&gt;\n        width: 500,\n        height: 500\n        });\n\n        // then create layer\n        var layer = new Konva.Layer();\n\n        // create our shape\n        var circle = new Konva.Circle({\n        x: stage.width() / 2,\n        y: stage.height() / 2,\n        radius: 50,\n        fill: &#39;red&#39;,\n        });\n\n        // add the shape to the layer\n        layer.add(circle);\n\n        // add the layer to the stage\n        stage.add(layer);\n\n        // draw the image\n        layer.draw();\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>code example from <a href=\"https://konvajs.org/docs/overview.html\">kanvajs.org</a></p>\n<p>Ofcourse the React version is way easier! Konva also offers a lot of other features like:</p>\n<ul>\n<li>Exporting to image</li>\n<li>exporting all elements to SVG</li>\n<li>events</li>\n</ul>\n<h2 id=\"events-in-konva\">events in konva</h2>\n<pre><code class=\"language-jsx\">import React from &#39;react&#39;\nimport Konva, { Stage, Layer, Circle } from &#39;react-konva&#39;\n\nconst App = () =&gt; {\n    const sayHello = () =&gt; {\n        console.log(&quot;hello&quot;)\n    }\n    return (\n        &lt;Stage&gt;\n            &lt;Layer&gt;\n                &lt;Circle\n                    fill=&quot;red&quot;\n                    radius=&quot;60&quot;\n                    onMouseOver={sayHello}\n                /&gt;\n            &lt;/Layer&gt;\n        &lt;/Stage&gt;\n    )\n}\n\nexport default App\n</code></pre>\n<p>Easy right. This wil trigger the <code>sayHello</code> method everytime you hover over it. Ofcourse there are lots of other events and triggers available. Feel free to read about the on <a href=\"https://konvajs.org/docs/react/index.html\">the Konva docs</a>.</p>\n<p>There are also a lot of Demo&#39;s available for Konva and react-konva. See them <a href=\"https://konvajs.org/docs/sandbox/index.html\">here</a></p>\n",
            "url": "https://www.elianvancutsem.com/blog/using-konvajs-as-canvas-with-react",
            "title": "ðŸ’„ Using KonvaJS as canvas with React",
            "summary": "Using KonvaJS as canvas with React",
            "image": "https://konvajs.org/assets/features/undraw_image_viewer_wxce.svg",
            "date_modified": "2021-03-11T21:47:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "Konva",
                "React",
                "Canvas",
                "Front-end"
            ]
        },
        {
            "id": "pairing-react-native-with-tailwindcss",
            "content_html": "<h1 id=\"pairing-react-native-with-tailwindcss\">Pairing React Native with TailwindCSS</h1>\n<p>For my web &amp; mobile development course @<a href=\"https://odisee.be/en\">Odisee</a> I had to make a mobile app with technologies of my choice. Ofcourse, I made the choice to use <a href=\"https://reactnative.dev/\">React Native</a> since it&#39;s very popular, has good documentation and is a good skill to have (and also available with Typescript). I also wanted to be able to use <a href=\"https://tailwindcss.com\">TailwindCSS</a>, since I&#39;m pretty proficient at it right now, and is very easy to get started with. For the back-end of the application, I made the choice to use <a href=\"https://deno.land\">Deno</a>, but that isn&#39;t important right now.</p>\n<p>So I went on the search for a easy template to start with (for faster development and results, not because I&#39;m lazy ðŸ˜‰), but I couldn&#39;t find any. It seems that React Native doesn&#39;t integrate easy with Tailwind, but there exists a NPM package to solve this called <a href=\"https://github.com/vadimdemedes/tailwind-rn\">Tailwind-rn</a>. So I tried it out and it seemed very easy to work with.</p>\n<h2 id=\"using-tailwind-rn\">Using tailwind-rn</h2>\n<p>Tailwind-rn is a NPM Package written by @<a href=\"https://github.com/vadimdemedes\">vadimdemedes</a> on Github and published on <a href=\"https://www.npmjs.com/package/tailwind-rn\">NPM</a>. It basically enables you to use tailwind classes inside the style attribute in React Native like so:</p>\n<pre><code class=\"language-jsx\">import tailwind from &#39;tailwind-rn&#39;;\n\nconst App = () =&gt; (\n    &lt;SafeAreaView style={tailwind(&#39;h-full&#39;)}&gt;\n        &lt;View style={tailwind(&#39;pt-12 items-center&#39;)}&gt;\n            &lt;View style={tailwind(&#39;bg-blue-200 px-3 py-1 rounded-full&#39;)}&gt;\n                &lt;Text style={tailwind(&#39;text-blue-800 font-semibold&#39;)}&gt;\n                    Hello Tailwind\n                &lt;/Text&gt;\n            &lt;/View&gt;\n        &lt;/View&gt;\n    &lt;/SafeAreaView&gt;\n);\n</code></pre>\n<p>This of course is very nice and what I wanted. But ofcourse it would be cleaner and easier if you could use a custom <code>tailwind.config.js</code> file to configure tailwind in the React Native application. It seems also that is possible with Tailwind-rn, but I haven&#39;t played around with it yet, but I&#39;ll sure do so soon.</p>\n<h2 id=\"building-my-own-template\">Building my own template</h2>\n<p>So, I tought that it could be useful to create a React Native template out of this. Since I looked for it, others must be too.</p>\n<p>A React Native template is actually very easy to install and use. Just run </p>\n<pre><code class=\"language-bash\">npx react-native init yourApp --template react-native-template-typescript\n</code></pre>\n<p>and it will automatically download the template from NPM (altough installing a template can also be done via <code>file://</code>, <code>https://</code> or <code>git://</code>) and install it on your local machine.</p>\n<p>To build my own template, I just downloaded the original template and modified it to use the tailwind-rn package. Configured the <code>package.json</code> and <code>template.config.js</code> files and published it to NPM.</p>\n<h2 id=\"publishing-the-package\">Publishing the package</h2>\n<p>I never published a package to NPM, so there was a bit of a learning curve. But it wasn&#39;t that hard once I had setup everything right.</p>\n<p>The final packages are available <a href=\"https://www.npmjs.com/package/react-native-template-tailwind\">here</a> and the typescript variant is available <a href=\"https://www.npmjs.com/package/react-native-template-ts-tailwind\">here</a>.</p>\n<p>To install my templates you can choose between two variant where one uses typescript and the other doesn&#39;t.</p>\n<p>For jsx version:</p>\n<pre><code class=\"language-bash\">npx react-native init yourApp --template react-native-template-tailwind\n</code></pre>\n<p>For tsx version:</p>\n<pre><code class=\"language-bash\">npx react-native init yourApp --template react-native-template-ts-tailwind\n</code></pre>\n<p>Maybe I&#39;ll make a template that uses the &quot;more advanced&quot; version of TailwindCSS with a custom <code>tailwind.config.js</code> one day.</p>\n<p>I hope some people get some value out of the package!</p>\n",
            "url": "https://www.elianvancutsem.com/blog/pairing-react-native-with-tailwindcss",
            "title": "âœ¨ Pairing React-native with TailwindCSS",
            "summary": "Writing my own React Native templates",
            "image": "https://snipcart.com/media/205228/tailwindcss-tutorial.png",
            "date_modified": "2021-02-20T17:37:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "TailwindCSS",
                "React Native",
                "NPM"
            ]
        },
        {
            "id": "using-tailwind-with-sass-preprocessor",
            "content_html": "<h1 id=\"using-sass-as-a-tailwindcss-preprocessor\">Using Sass as a tailwindCSS preprocessor</h1>\n<p>Today I fiddled around with Tailwind @apply classes. I previously posted about a darkmode in combination with @apply classes and damn it goes well together. But I discovered a problem and got stuck on it for a while. It seems that when you&#39;re using tailwind without PostCSS 8, it doesn&#39;t compile the nested classes. So I searched for a fix.</p>\n<p>It seems that the <a href=\"https://tailwindcss.com/docs/using-with-preprocessors\">TailwindCSS documentation</a> has a page dedicated to this and it solves the problem in an ideal situation. But the codebase I used didn&#39;t use Postcss, so I had to find a workaround.</p>\n<h2 id=\"ideal-solution\">Ideal solution</h2>\n<p>the ideal solution is actually very clean and simple, just require the <code>postcss-import</code> and <code>postcss-nesting</code> packages in the <code>postcss.config.js</code> file. like so:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  plugins: [\n    require(&#39;postcss-import&#39;),\n    require(&#39;tailwindcss&#39;),\n    require(&#39;postcss-nested&#39;), // or require(&#39;postcss-nesting&#39;)\n    require(&#39;autoprefixer&#39;),\n  ]\n}\n</code></pre>\n<p>Very simple, very nice. But how to fix it when you&#39;re not using PostCSS (yet) ?</p>\n<h2 id=\"describing-the-setup\">Describing the setup</h2>\n<p>In the project I was working in, we&#39;re using a webpack / babel setup with minifyCSS to compile the CSS into the production environment. To change the whole system was probably going to take a while and to be honest I didn&#39;t write that code and didn&#39;t feel certain that everything was going to work.\nI searched around for a bit on the <a href=\"https://github.com/postcss/postcss#usage\">documentation of PostCSS</a> and tought of a fix on how it possibly could work.</p>\n<h2 id=\"how-to-fix\">How to fix</h2>\n<p>I tought of a way to just compile the <code>tailwind.scss</code> file into a compiled <code>tailwind.css</code> file with of course the compiled nested classes. To do this I basically installed the <code>postcss-cli</code> NPM package. and configured the build scripts in <code>package.json</code> to compile Tailwind</p>\n<pre><code class=\"language-json\">// package.json\n&quot;scripts&quot;: {\n    &quot;build:tailwind&quot;: &quot;postcss ./assets/css/tailwind.scss -o public_html/assets/css/tailwindoutput.css&quot;,\n    &quot;watch:tailwind&quot;: &quot;postcss ./assets/css/tailwind.scss -o public_html/assets/css/tailwindoutput.css --watch&quot;\n  },\n</code></pre>\n<p>out of the box this does work for the basics, but still the nested classes were not working, so I now could follow <a href=\"https://github.com/postcss/postcss#usage\">the documentation</a> and add the plugins to the <code>postcss.config.js</code></p>\n<pre><code class=\"language-javascript\">//postcss.config.js\nmodule.exports = {\n  plugins: [\n    require(&#39;postcss-import&#39;),\n    require(&#39;tailwindcss&#39;),\n    require(&#39;autoprefixer&#39;),\n    require(&#39;postcss-nested&#39;)\n  ]\n}\n</code></pre>\n<p>Now everything finally worked fine and I could use nested classes!</p>\n<pre><code class=\"language-scss\">/* tailwind.scss */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.header {\n    @apply text-gray-600 hover:text-gray-900 dark:text-gray-200 dark:hover:text-gray-50;\n    nav {\n        @apply hover:text-green-800;\n    }\n}\n</code></pre>\n",
            "url": "https://www.elianvancutsem.com/blog/using-tailwind-with-sass-preprocessor",
            "title": "ðŸ’„ Tailwind with sass",
            "summary": "Using Sass as a tailwind preprocessor",
            "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Sass_Logo_Color.svg/1200px-Sass_Logo_Color.svg.png",
            "date_modified": "2021-02-16T19:13:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "Sass",
                "TailwindCSS",
                "Front-end"
            ]
        },
        {
            "id": "using-valet-for-local-development",
            "content_html": "<h1 id=\"using-laravel-valet-for-local-php-development\">Using Laravel Valet for local PHP development</h1>\n<p>This week I&#39;ve been developing PHP and Twig at my internship at <a href=\"https://vbridge.eu\">vBridge</a>, since we&#39;re using a big pile of sourcecode, Docker doesn&#39;t perform as well. To fix this <a href=\"https://bram.us\">Bramus</a> told me about a tool called Valet. So I went on the search to configure and install Valet.</p>\n<h2 id=\"installing-valet\">Installing Valet</h2>\n<p>Installing Valet is actually really easy. They have incredible <a href=\"https://laravel.com/docs/master/valet\">documentation</a> (as usual with Laravel).</p>\n<p>You can simply install it by using <code>composer global require laravel/valet</code> if you&#39;ve installed <a href=\"https://brew.sh/\">Homebrew</a>, PHP and <a href=\"https://getcomposer.org/\">Composer</a>, else you should install those first (but also that is very easy). Once that&#39;s done, simply run <code>valet install</code> and Valet will install and start.</p>\n<p>Now that valet is installed and started you&#39;ll be able to ping any <code>.test</code> domain and it&#39;ll answer from <code>localhost</code> or <code>172.0.0.1</code>.</p>\n<p>Valet also starts when you boot your computer and will run as a background process with only 7mb of RAM!</p>\n<p><em>Also, Valet is MacOS only</em></p>\n<h2 id=\"valet-link\">Valet Link</h2>\n<p>So installing is easy, so mapping a domain shouldn&#39;t be hard right! just cd into the directory you want to run as a site and run <code>valet link</code> and the name of the directory will be used as domain. For insance: </p>\n<pre><code class=\"language-bash\">cd laravelsite\nvalet link\n</code></pre>\n<p>Now when you open your browser and go to <code>laravelsite.test</code>. It will magically appear on the screen! awesome right!</p>\n<p>You can also name a link by running <code>valet link &lt;name&gt;</code>. For instance:</p>\n<pre><code class=\"language-bash\">cd laravelsite\nvalet link newsite\n</code></pre>\n<p>Now it&#39;s available at <code>newsite.test</code></p>\n<p>It&#39;s amazing!</p>\n<h2 id=\"valet-use\">Valet use</h2>\n<p>So, imagine that you&#39;re developing a website on your local machine with the newest version of PHP, but the server you&#39;ll be deploying to uses a much older PHP version. You don&#39;t want to put in the work to install a new old version right? Valet got you covered!</p>\n<p>Just run <code>valet use php@version</code> and valet will use that version. If you don&#39;t have the version installed locally, it will install it for you.</p>\n<p>But ofcourse, <a href=\"https://github.com/sgotre/sphp-osx\">sphp</a> is a valid choice too.</p>\n<h2 id=\"valet-secure\">Valet Secure</h2>\n<p>Tired of the stupid browser notification that localhost isn&#39;t secured? Me too. Valet also has a nifty solution. Run <code>valet secure &lt;name&gt;</code>x and it will install a certificate for you.</p>\n<p>It&#39;s insane how easy this all is!</p>\n<h2 id=\"valet-envphp\">valet-env.php</h2>\n<p>Ofcourse if you&#39;re a somewhat more demanding user. It can be interesting to use and create custom environment variables.</p>\n<p>Valet has support for a file called <code>valet-env.php</code> and will use it to configure and use environment variables</p>\n<p>For instance:</p>\n<pre><code class=\"language-php\">&lt;?php\n\nreturn [\n    &#39;newsite&#39; =&gt; [\n        &#39;APP_ENV&#39; =&gt; &#39;dev&#39;,\n    ],\n];\n</code></pre>\n<p>Now when you&#39;ll open <code>newsite.test</code> in your browser, it&#39;ll have the dev environment!</p>\n<p>Read the post about environment variable from Bramus <a href=\"https://www.bram.us/2019/01/17/laravel-valet-environment-variables/\">here</a></p>\n<p>Read the <a href=\"https://laravel.com/docs/master/valet\">full documentation here</a>!</p>\n",
            "url": "https://www.elianvancutsem.com/blog/using-valet-for-local-development",
            "title": "âœ¨ Using Valet for local PHP development",
            "summary": "Setting up local PHP development with Laravel Valet",
            "image": "https://res.cloudinary.com/redfern-web/image/upload/v1598516539/redfern-dev/png/valet.png",
            "date_modified": "2021-02-12T20:48:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "Laravel",
                "Valet",
                "PHP"
            ]
        },
        {
            "id": "adding-dark-mode-tailwind",
            "content_html": "<h1 id=\"add-dark-mode-to-your-site-with-tailwindcss\">Add dark mode to your site with TailwindCSS</h1>\n<p>I&#39;ve fiddled arround with <a href=\"https://tailwindcss.com/\">TailwindCSS</a> for some time now, but never got to the point of adding dark mode. But actually it isn&#39;t that hard since v2.0.</p>\n<h2 id=\"official-dark-mode-documentation\">Official dark mode documentation</h2>\n<p>TailwindCSS docs has it&#39;s very own dedicated <a href=\"https://tailwindcss.com/docs/dark-mode\">documentation on dark mode</a>. So I used it as a guide to setup my application&#39;s dark mode.</p>\n<h2 id=\"tailwind-config\">Tailwind config</h2>\n<p>Tailwind disables dark mode in a basic setup to reduce the size of the css-file. To enable it you just have to add <code>darkMode: &#39;media&#39;</code> or <code>darkMode: &#39;class&#39;</code> in your <code>tailwind.config.js</code>. In the minimal config it would look like this:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n    purge: [],\n    darkMode: &#39;class&#39;, // or &#39;media&#39;\n    theme: {},\n    variants: {},\n    plugins: []\n}\n</code></pre>\n<h2 id=\"media-vs-class\">&#39;media&#39; vs &#39;class&#39;</h2>\n<p>Dark mode in tailwind is very easy with <code>media</code>. It will take the <code>prefers-color-scheme</code> of your OS to determine if you&#39;re using dark or light mode. Dark mode <code>class</code> will use a manual toggle to determine dark or light mode. With <code>class</code> you can add the <code>class</code> to your html element. You can simply toggle this with JavaScript.</p>\n<h2 id=\"how-to-use-dark-mode-in-css\">How to use dark mode in css</h2>\n<p>It&#39;s as simple as just adding <code>dark:bg-black</code> to your html classes.</p>\n<pre><code class=\"language-html\">&lt;body class=&quot;bg-white dark:bg-black&quot;&gt;\n    &lt;h1 class=&quot;text-black dark:text-white&quot;&gt;\n        What color am I?\n    &lt;/h1&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Tailwind will then automagically determine what classes to use.</p>\n<p>Above is ofcourse an easy example, but <code>dark:</code> can also be stacked to other variants like <code>lg:</code> or <code>hover:</code>. So in the example below, the text will be black on smaller screens but white on larger screens.</p>\n<pre><code class=\"language-html\">&lt;h1 class=&quot;text-black dark:lg:text-white&quot;&gt;\n    What color am I?\n&lt;/h1&gt;\n</code></pre>\n<h2 id=\"variants\">Variants</h2>\n<p>By default Tailwind dark classes are available on background colors, border colors, text colors and a few more. But you can extend tailwind to your needs by configuring <code>tailwind.config.js</code></p>\n<pre><code class=\"language-javascript\">module.exports = {\n    // ...\n    variants: {\n        extend: {\n            textOpacity: [&#39;dark&#39;]\n        }\n    }\n}\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>TailwindCSS dark mode is very easy when combined with <code>@apply</code> classes and can be extended to your needs. It&#39;s easy to configure and can give an extra functionality to your application.</p>\n<p>See an example <a href=\"https://github.com/ElianVanCutsem/tailwind-dark-mode-example\">here</a> or <a href=\"https://admiring-wescoff-a17fa9.netlify.app/\">here</a>.</p>\n",
            "url": "https://www.elianvancutsem.com/blog/adding-dark-mode-tailwind",
            "title": "ðŸ’„darkmode in TailwindCSS",
            "summary": "Adding dark mode to TailwindCSS",
            "image": "https://snipcart.com/media/205228/tailwindcss-tutorial.png",
            "date_modified": "2021-02-09T18:11:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "TailwindCSS",
                "JavaScript",
                "Front-end"
            ]
        },
        {
            "id": "building-website-in-nuxt",
            "content_html": "<h1 id=\"recreating-my-site-in-nuxt-and-adding-a-blog\">Recreating my site in Nuxt and adding a blog</h1>\n<p>So, next week I&#39;m about to start my journey as a Full-stack software engineer at <a href=\"https://www.vbridge.eu\">vBridge</a>. I&#39;m so excited! The internship is part of my school program, a part of the internship is keeping a blog with your findings and thoughts, so I decided to build my own blog with <a href=\"https://www.nuxtjs.org\">Nuxt</a> instead of a regular WordPress or something else. Nuxt was on my &#39;want to learn&#39; list for a while, so I was very excited to finally try out the framework. I&#39;m a huge fan of <a href=\"https://www.vuejs.org\">Vue</a> so it didn&#39;t seem very hard to learn and implement Nuxt. I was right.</p>\n<h2 id=\"setting-up-nuxt\">Setting up Nuxt</h2>\n<p>setting up Nuxt was actually really easy. I just searched for the <a href=\"https://nuxtjs.org/docs/2.x/get-started/installation\">official Nuxt documentation</a>, turns out to be a very good documented framework (not that I expected something else since the <a href=\"https://v3.vuejs.org/guide\">Vue documentation</a> is the best I&#39;ve ever seen).</p>\n<p>On the homepage of the Nuxt documentation there&#39;s a very simple guide that takes you trough the whole setup. It&#39;s just a few command since it uses the <code>create nuxt-app</code> command to setup the basic template app. From there I kind of figured the rest out by scrolling through the documentation.</p>\n<h3 id=\"static-generation\">static generation</h3>\n<p>since I&#39;m hosting my whole website with <a href=\"https://pages.github.com/\">Github Pages</a> I had to configure Nuxt to generate static files. Also this was really easy. I just had to put <code>target: &#39;static&#39;</code> in the <code>nuxt.config.js</code> file. It already pre-configured the yarn commands for me. (yes, I&#39;m a yarn user)</p>\n<h3 id=\"front-end-configuration\">front-end configuration</h3>\n<p>The Nuxt website was now configured for the most part, but since I already had a Vue website, I had to rebuild it in Nuxt (which is basically the same), So I dragged and dropped my files in the pre-made folders in the example app and installed Bootstrap &amp; bootstrap-vue, and everything worked as it should!</p>\n<p>Nuxt has a pre-configured router, so I didn&#39;t even had to setup the routing.</p>\n<h2 id=\"building-a-blog\">Building a blog</h2>\n<p>As I said in the introduction, I mainly transferred my old Vue site to Nuxt to be able to include a simple blog feature. I just googled: &quot;how to build a blog in Nuxt&quot;. Turns out Nuxt itself had a blog post: <a href=\"https://nuxtjs.org/blog/creating-blog-with-nuxt-content\">Creating blog with Nuxt content</a>. So I basically followed that guide to create my own blog</p>\n<h3 id=\"nuxtcontent\">Nuxt/content</h3>\n<p>Nuxt content also has it&#39;s own dedicated documentation which is <a href=\"https://content.nuxtjs.org/\">https://content.nuxtjs.org/</a>.</p>\n<p>The setup for a blog is very easy. You install the <code>@nuxt/content</code> package and you&#39;re almost ready to go. Just have to add some settings in the <code>nuxt.config.js</code> file, add some .md files with your blog content per post, a new page with your blog feed and a template for your blog. It worked super fast and couldn&#39;t be any easier.</p>\n<p>It pre-configures an API where you can fetch your posts by a global variable <code>$content</code> more about that is described <a href=\"https://content.nuxtjs.org/fetching\">here</a>. In a static environment it compiles all files to a <code>db.json</code> file where it fetches the content.</p>\n<h3 id=\"nuxtfeed\">Nuxt/feed</h3>\n<p>To fulfill al the requirements for school, I also had to add a RSS feed to my blog. I&#39;m a big fan of the <a href=\"https://feedly.com/\">Feedly</a> platform (which is a RSS-feed reader). So I googled some more on how to pair Nuxt and RSS. Also this was well documented in exactly how I needed it to be. It&#39;s just in the <a href=\"https://content.nuxtjs.org/integrations#nuxtjsfeed\">nuxt content integrations section</a> in the documentation. This was somewhat more complicated, but still very easy since it&#39;s so well documented. You basically install the <code>@nuxtjs/feed</code> module and configure it in the <code>nuxt.config.js</code> file. I only needed the RSS XML version, but even more formats are supported (JSON, for instance).</p>\n<p>Something that took some more research was displaying the content correct in the RSS feed. I could just input the whole static html as the content, but that looked really off since it also inserted the header and footer in the content. So I decided to take the raw .md contents as the content, only then to discover that most RSS feeders didn&#39;t display it right, so I then installed the <code>marked</code> NPM package and converted it to HTML, now it looks like I wanted it to.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Nuxt is a very easy to install and use platform which is well documented. If you already know Vue it&#39;s only a little step-up but can improve the speed for a production ready product. The blog stack in nuxt is easy to install and use if you know some markdown and don&#39;t need a CMS, which I don&#39;t since I host on Github pages.</p>\n",
            "url": "https://www.elianvancutsem.com/blog/building-website-in-nuxt",
            "title": "ðŸŽ‰ Initial commit",
            "summary": "Building my website and blog with Nuxt",
            "image": "https://madewithnetwork.ams3.cdn.digitaloceanspaces.com/spatie-space-production/3075/nuxtjs-2.jpg",
            "date_modified": "2021-02-03T18:11:00.000Z",
            "author": {
                "name": "Elian Van Cutsem"
            },
            "tags": [
                "Nuxt",
                "JavaScript",
                "Blog"
            ]
        }
    ]
}